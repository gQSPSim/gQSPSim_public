classdef tgQSPSim < matlab.unittest.TestCase & QSPViewer.App
    
    methods(TestMethodTeardown)
        function tcleanup(testCase)
            close all force
            sbioreset;
        end
    end
    
    methods(TestClassSetup)
        function classSetup(testCase)            
            disp('ClassSetup called');
        end
    end
    
    methods(TestMethodSetup)
        function foo(testCase)
            testCase.onFailure(@() disp('Failure Found'));
        end
    end
    
    methods
        function obj = tgQSPSim(filename)
            if nargin == 0
                rootDirectory = string(pwd) + "/../Sessions/CaseStudy_aPCSK9/aPCSK9_v7_MES_complete/";;
                %rootDirectory = "/Users/pax/work/gQSPsim/Sessions/CaseStudy_aPCSK9/aPCSK9_v7_MES_complete/";
                filename = rootDirectory + "CaseStudy2_aPCSK9.qsp.mat";
            else
                rootDirectory = fileparts(filename);
            end
            
            a = obj.loadSessionFromFile(filename, false);            
            obj.Session.RootDirectory = char(rootDirectory);
            obj.Session.UseParallel = false;
            obj.Session.AutoSaveBeforeRun = false;
        end
    end
    
    methods(Test)
        function tSimulations(testCase)
            for i = 1:numel(testCase.Session.Simulation)
                simResultsFolder = string(testCase.Session.Simulation(i).SimResultsFolderName);
                testCase.Session.Simulation(i).SimResultsFolderName = 'tmp';
                
                [a, e] = testCase.Session.Simulation(i).run;
                
                % This assumes an empty "current" directory for output. So
                % any new files found here are those generated by the
                % Simulation and are used for comparison. If there is a
                % failure the actual files that fail are copied into a
                % failed directory in order to facilitate debugging.
                p = string(testCase.Session.RootDirectory) + "/tmp";
                d = dir(p + "/*.mat");
                for result_i = 1:numel(d)
                    actualName = [d(result_i).folder, '/', d(result_i).name];
                    
                    actual = load(actualName);
                    
                    % optimize getting this directory listing..
                    expectedResults = dir(testCase.Session.RootDirectory + "/" + simResultsFolder);
                    expectedFileNames = string({expectedResults.name});
                    currentFile = string(d(result_i).name);
                    currentFile = currentFile.extractBefore("Date = ");
                    
                    expectedEntryTF = expectedFileNames.contains(currentFile);
                    expectedFile = expectedResults(expectedEntryTF);
                    expected = load(expectedFile.folder + "/" + expectedFile.name);
                    
                    testCase.verifyEqual(actual, expected, 'RelTol', 1e-2, 'AbsTol', 1e-4);
                    
                    % Cleanup TODO. If the test failed move the generated
                    % data to a failed directory to aid debugging. Else we
                    % delete the generated file.
                    delete(actualName);
                end
                                
            end
        end
        
        %function tOptimizations(testCase)
        %    tester = gQSPSimTester; % make this a testParameter TODO
        %    [a, e] = tester.Session.Optimization(1).run;
        %    testCase.verifyTrue(a);
        %end
    end
    
end




